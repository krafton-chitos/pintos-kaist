Kernel command line: -q -f put fork-multiple run fork-multiple
0 ~ 9fc00 1
100000 ~ 13e0000 1
Pintos booting with: 
	base_mem: 0x0 ~ 0x9fc00 (Usable: 639 kB)
	ext_mem: 0x100000 ~ 0x13e0000 (Usable: 19,328 kB)
Calibrating timer...  78,540,800 loops/s.
hd0:0: detected 321 sector (160 kB) disk, model "QEMU HARDDISK", serial "QM00001"
hd0:1: detected 20,160 sector (9 MB) disk, model "QEMU HARDDISK", serial "QM00002"
hd1:0: detected 104 sector (52 kB) disk, model "QEMU HARDDISK", serial "QM00003"
Formatting file system...done.
Boot complete.
Putting 'fork-multiple' into the file system...
Executing 'fork-multiple':
(fork-multiple) begin
(fork-multiple) child run
child: exit(4)
(fork-multiple) Parent: child exit status is 4
(fork-multiple) child run
child: exit(5)
Interrupt 0x0d (#GP General Protection Exception) at rip=800421bf10
 cr2=0000000000000000 error=               0
rax ccccccccccccc82c rbx 0000000000000000 rcx 00000000004034f2 rdx 0000000000000020
rsp 0000008004240eb0 rbp 0000008004240ef0 rsi 0000000000000000 rdi 0000008004240080
rip 000000800421bf10 r8 0000000000000000  r9 0000000000000000 r10 0000000000000000
r11 0000000000000216 r12 000000800421cee3 r13 0000000000000000 r14 0000000000000000
r15 0000000000000000 rflags 00000292
es: 001b ds: 001b cs: 0008 ss: 0010
Kernel PANIC at ../../userprog/exception.c:97 in kill(): Kernel bug - unexpected interrupt in kernel
Call stack: 0x8004217ecd 0x800421cc18 0x8004208d77 0x8004209195 0x800421d268 0x800421cf90 0x800421ce0c 0x40013b 0x4001b3 0x400229 0x400cca.
The `backtrace' program can make call stacks useful.
Read "Backtraces" in the "Debugging Tools" chapter
of the Pintos documentation for more information.
Timer: 89 ticks
Thread: 36 idle ticks, 36 kernel ticks, 17 user ticks
hd0:0: 0 reads, 0 writes
hd0:1: 87 reads, 236 writes
hd1:0: 104 reads, 0 writes
Console: 1835 characters output
Key